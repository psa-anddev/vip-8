(ns vip-8.core-test
  (:require [clojure.test :refer [deftest testing is]]
            [vip-8.core :refer :all]
            [vip-8.rom :as rom]
            [vip-8.screen :as screen]))

(deftest load-rom-tests
  (testing "font is loading in memory in addresses from 050 to 09F"
    (with-redefs [rom/read-rom (fn [_] [])]
      (let [status (load-rom "test.ch8")
            memory (:memory status)]
        (is (= (nth memory 0x050)
               0xF0))
        (is (= (nth memory 0x051)
               0x90))
        (is (= (nth memory 0x052)
               0x90))
        (is (= (nth memory 0x053)
               0x90))
        (is (= (nth memory 0x054)
               0xF0))
        (is (= (nth memory 0x055)
               0x20))
        (is (= (nth memory 0x056)
               0x60))
        (is (= (nth memory 0x057)
               0x20))
        (is (= (nth memory 0x058)
               0x20))
        (is (= (nth memory 0x59)
               0x70))
        (is (= (nth memory 0x5A)
               0xF0))
        (is (= (nth memory 0x5B)
               0x10))
        (is (= (nth memory 0x5C)
               0xF0))
        (is (= (nth memory 0x5D)
               0x80))
        (is (= (nth memory 0x5E)
               0xF0))
        (is (=  (nth memory 0x5F)
               0xF0))
        (is (= (nth memory 0x60)
               0x10))
        (is (= (nth memory 0x61)
               0xF0))
        (is (= (nth memory 0x62)
               0x10))
        (is (= (nth memory 0x63)
               0xF0))
        (is (= (nth memory 0x64)
               0x90))
        (is (= (nth memory 0x65)
               0x90))
        (is (= (nth memory 0x66)
               0xF0))
        (is (= (nth memory 0x67)
               0x10))
        (is (= (nth memory 0x68)
               0x10))
        (is (= (nth memory 0x69)
               0xF0))
        (is (= (nth memory 0x6A)
               0x80))
        (is (= (nth memory 0x6B)
               0xF0))
        (is (= (nth memory 0x6C)
               0x10))
        (is (= (nth memory 0x6D)
               0xF0))
        (is (= (nth memory 0x6E)
               0xF0))
        (is (= (nth memory 0x6F)
               0x80))
        (is (= (nth memory 0x70)
               0xF0))
        (is (= (nth memory 0x71)
               0x90))
        (is (= (nth memory 0x72)
               0xF0))
        (is (= (nth memory 0x73)
               0xF0))
        (is (= (nth memory 0x74)
               0x10))
        (is (= (nth memory 0x75)
               0x20))
        (is (= (nth memory 0x76)
               0x40))
        (is (= (nth memory 0x77)
               0x40))
        (is (= (nth memory 0x78)
               0xF0))
        (is (= (nth memory 0x79)
               0x90))
        (is (= (nth memory 0x7A)
               0xF0))
        (is (= (nth memory 0x7B)
               0x90))
        (is (= (nth memory 0x7C)
               0xF0))
        (is (= (nth memory 0x7D)
               0xF0))
        (is (= (nth memory 0x7E)
               0x90))
        (is (= (nth memory 0x7F)
               0xF0))
        (is (= (nth memory 0x80)
               0x10))
        (is (= (nth memory 0x81)
               0xF0))
(is (= (nth memory 0x82)
       0xF0))
(is (= (nth memory 0x83)
       0x90))
(is (= (nth memory 0x84)
       0xF0))
(is (= (nth memory 0x85)
       0x90))
(is (= (nth memory 0x86)
       0x90))
(is (= (nth memory 0x87)
       0xE0))
(is (= (nth memory 0x88)
       0x90))
(is (= (nth memory 0x89)
       0xE0))
(is (= (nth memory 0x8A)
       0x90))
(is (= (nth memory 0x8B)
       0xE0))
(is (= (nth memory 0x8C)
       0xF0))
(is (= (nth memory 0x8D)
       0x80))
(is (= (nth memory 0x8E)
       0x80))
(is (= (nth memory 0x8F)
       0x80))
(is (= (nth memory 0x90)
       0xF0))
(is (= (nth memory 0x91)
       0xE0))
(is (= (nth memory 0x92)
       0x90))
(is (= (nth memory 0x93)
       0x90))
(is (= (nth memory 0x94)
       0x90))
(is (= (nth memory 0x95)
       0xE0))
(is (= (nth memory 0x96)
       0xF0))
(is (= (nth memory 0x97)
       0x80))
(is (= (nth memory 0x98)
       0xF0))
(is (= (nth memory 0x99)
       0x80))
(is (= (nth memory 0x9A)
       0xF0))
(is (= (nth memory 0x9B)
       0xF0))
(is (= (nth memory 0x9C)
       0x80))
(is (= (nth memory 0x9D)
       0xF0))
(is (= (nth memory 0x9E)
       0x80))
(is (= (nth memory 0x9F)
       0x80)))))
(testing "Rom is loaded from address 0x200"
  (let [expected [0x00 0xE0 0x14 0x78]]
    (with-redefs [rom/read-rom (fn [_] expected)]
      (let [status (load-rom "test.ch8")
            memory (:memory status)
            actual (take (count expected) 
                         (drop 0x200 memory))]
        (is (= actual expected))))))
(testing "there are 4096 bytes of available memory"
  (let [rom [0x00 0xE0 0x14 0x78]]
    (with-redefs [rom/read-rom (fn [_] rom)]
      (let [status (load-rom "test.ch8")
            memory (:memory status)]
        (is (= 4096 (count memory)))))))
(testing "the stack is empty"
  (with-redefs [rom/read-rom (fn [_] [])]
    (let [stack (:stack (load-rom "test.ch8"))]
      (is (and (empty? stack)
               (not (nil? stack)))))))
(testing "the v registers are set to 0x00"
  (with-redefs [rom/read-rom (fn [_] [])]
    (let [registers (:registers (load-rom "tetris.ch8"))]
      (is (and (= (:v0 registers)
                  0x00)
               (= (:v1 registers)
                  0x00)
               (= (:v2 registers)
                  0x00)
               (= (:v3 registers)
                  0x00)
               (= (:v4 registers)
                  0x00)
               (= (:v5 registers)
                  0x00)
               (= (:v6 registers)
                  0x00)
               (= (:v7 registers)
                  0x00)
               (= (:v8 registers)
                  0x00)
               (= (:v9 registers)
                  0x00)
               (= (:vA registers)
                  0x00)
               (= (:vB registers)
                  0x00)
               (= (:vC registers)
                  0x00)
               (= (:vD registers)
                  0x00)
               (= (:vE registers)
                  0x00)
               (= (:vF registers)
                  0x00))))))
(testing "program counter is set to 0x200"
  (with-redefs [rom/read-rom (fn [_] [])]
    (is (= (:pc (:registers (load-rom "tetris.ch8")))
           0x200))))
(testing "timers start at value 0"
  (with-redefs [rom/read-rom (fn [_] [])]
    (let [timers (:timers (load-rom "tetris.ch8"))]
      (is (and (= (:delay timers)
                  0)
               (= (:sound timers)
                  0))))))
(testing "index register is set to 0"
  (with-redefs [rom/read-rom (fn [_] [])]
    (let [registers (:registers (load-rom "tetris.ch8"))]
      (is (= (:index registers) 0x000)))))
(let [screen (atom (repeat 32 (repeat 64 true)))]
  (with-redefs [rom/read-rom 
                (fn [_] [0x00 0xE0 0xA2 0x01])
                screen/clear 
                (fn []
                  (swap! screen 
                         (fn [_] 
                           (repeat 32 (repeat 64 false)))))]
    (let [initial-status (load-rom "pong.ch8")]
      (testing "clear instruction clears the screen"
        (let [status (step initial-status)]
          (is (= (:pc (:registers status))
                 0x202))
          (is (= (count (filter 
                          #(> (count 
                                (filter (fn [x] x) %)) 0) @screen))
                 0))))
      (testing "index register can be set"
        (let [status (step (assoc initial-status
                                  :registers
                                  (assoc (:registers initial-status)
                                         :pc
                                         0x202)))
              registers (:registers status)]
          (is (= (:pc registers) 0x204))
          (is (= (:index registers) 0x201))))))))
